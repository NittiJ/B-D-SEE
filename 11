library(tidyverse)
library(vroom)
library(readxl)
library(RODBC)
library(fs)
library(stringr)

# --- Paths ---
bdc_path <- "C:/BDC/"
bpd_rdata <- "C:/RCode/20250703_BPDFile.RData"
recognition_mapping_file <- "C:/BDC/recognition messaging.xlsx"
blank_shell <- "C:/BDC/blank_.accdb"
access_target <- file.path(bdc_path, paste0("BDC_", Sys.Date(), ".accdb"))

# --- Load and clean BPD data ---
load(bpd_rdata)

Final_Keys <- Final_Data_Full %>%
  mutate(across(where(is.character), ~str_to_upper(str_trim(.)))) %>%
  select(
    BCBSA_MSTR_PROV_ID,
    PROV_MSTR_LOC_ID,
    NPI,
    TXNMY_CD,
    ORG_NAME,
    ENTITY_TYPE,
    PROV_ADDR_LINE_1,
    PROV_ADRS_CITY,
    PROV_ADRS_ST,
    PROV_ADRS_ZIP_CD
  )

rm(Final_Data_Full)

# --- Load recognition mapping ---
recognition_valid <- read_excel(recognition_mapping_file) %>%
  mutate(across(everything(), ~str_to_upper(str_trim(.)))) %>%
  distinct(`RECOGNITION ENTITY CD`, `RECOGNITION VALUE CD`) %>%
  rename(RECOGNTN_ENTITY_CD = `RECOGNITION ENTITY CD`,
         Recogntn_Value_CD = `RECOGNITION VALUE CD`)

# --- Load BDC .txt.gz files ---
bdc_files <- list.files(bdc_path, pattern = "\\.txt\\.gz$", full.names = TRUE)

BDC_Data <- map_dfr(bdc_files, function(file) {
  vroom(file, delim = "|", col_types = cols(.default = "c")) %>%
    rename(PROV_MSTR_LOC_ID = BCBSA_PROV_MSTR_LOC_ID) %>%
    mutate(across(where(is.character), ~str_to_upper(str_trim(.)))) %>%
    mutate(PROV_ADRS_ZIP_CD = str_sub(PROV_ADRS_ZIP_CD, 1, 5))
})

# --- Filter and match recognition codes ---
Filtered_BDC <- BDC_Data %>%
  semi_join(recognition_valid, by = c("RECOGNTN_ENTITY_CD", "Recogntn_Value_CD")) %>%
  filter(
    Designation_TYPE %in% c("BDC", "BDC+", "CC"),
    !is.na(Bdc_Program_DESCRIPTION)
  )

# --- Join to BPD data ---
Matched_BDC <- inner_join(Filtered_BDC, Final_Keys, by = c("BCBSA_MSTR_PROV_ID", "PROV_MSTR_LOC_ID"))

# --- Entity-specific filters per association guidance ---
Matched_BDC <- Matched_BDC %>%
  filter(
    !(str_detect(Bdc_Program_DESCRIPTION, "FERTILITY") & ENTITY_TYPE != "1"),
    !(str_detect(Bdc_Program_DESCRIPTION, "CANCER CARE") & ENTITY_TYPE != "4"),
    !(str_detect(Bdc_Program_DESCRIPTION, "SUBSTANCE USE") & ENTITY_TYPE != "4"),
    !(str_detect(Bdc_Program_DESCRIPTION, "TRANSPLANT") & ENTITY_TYPE != "4")
  )

# --- Deduplication: provider-location-program-designation level ---
Matched_BDC <- Matched_BDC %>%
  distinct(BCBSA_MSTR_PROV_ID, PROV_MSTR_LOC_ID, Designation_TYPE, Bdc_Program_DESCRIPTION, .keep_all = TRUE)

# --- Format for export ---
BDC_Final <- Matched_BDC %>%
  mutate(
    PROVIDER_NAME = ORG_NAME,
    NTWK = "",
    PROVTYPE = "",
    TAXONOMY = TXNMY_CD,
    RowId = row_number(),
    Latitude = NA_character_,
    Longitude = NA_character_,
    GeoInfo = NA_character_,
    StandardZip = NA_character_,
    StandardStat = NA_character_,
    CountySSA = NA_character_
  ) %>%
  transmute(
    NTWK,
    PROVTYPE,
    NPI,
    PROVIDER_NAME,
    ADDRESS = PROV_ADDR_LINE_1,
    CITY = PROV_ADRS_CITY,
    STATE = PROV_ADRS_ST,
    ZIP_5 = PROV_ADRS_ZIP_CD,
    TAXONOMY,
    RowId,
    Latitude,
    Longitude,
    GeoInfo,
    StandardZip,
    StandardStat,
    CountySSA,
    Bdc_Program_DESCRIPTION,
    RECOGNTN_ENTITY_CD,
    Recogntn_Value_CD,
    Designation_TYPE
  )

# --- Optional: Print summary counts to validate before export ---
BDC_Final %>%
  count(Bdc_Program_DESCRIPTION, Designation_TYPE) %>%
  arrange(Bdc_Program_DESCRIPTION, Designation_TYPE) %>%
  print(n = 50)

# --- Export to Access ---
file_copy(blank_shell, access_target, overwrite = TRUE)

conn <- odbcDriverConnect(paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=", access_target))

chunk_size <- 10000
n <- nrow(BDC_Final)

for (start in seq(1, n, by = chunk_size)) {
  end <- min(start + chunk_size - 1, n)
  chunk <- BDC_Final[start:end, ]
  sqlSave(conn, chunk, tablename = "NTWK", rownames = FALSE, append = (start != 1), safer = TRUE)
}

odbcClose(conn)
message("Export complete: ", access_target)
